// Rover controller FM algorithm mixin

// Sets of constants used in the algoritm
use RoverController_FMParameterSets.ump;

class RoverController {

  // central algorithm to control the follower rover
  public void follow() {

    // Start the simulation      
    System.out.println("program: "+ ref.send("ready"));

    // Start off at full power
    drive.Go();
    
    // Wait a little for the leader to get going
    sleepms(INITIAL_LEADER_HEADSTART_TIME);
    
    int coastTime=0;  // How much time will we coast next after power pulse released
    int powerTime=0;  // How much time we will pulse power
    int turnTime= 0; // How much time will we spend on turning pulse
    double amountBehind = 0.0;  // How far from leader are we
    double offHeading =0.0; // How far in degrees are we from heading to leader
    boolean braking = false; // Are we in process of braking as far too close?
    double leaderX = 0.0;  // Where is leader? X
    double leaderY = 0.0; // Where is leader? Y
    double prevLeaderX = 0.0; // Where was leader? X (to check if stopped)
    double prevLeaderY = 0.0; // Where was leader? Y
    int breakReadyCount = 0; // Countdown to see if we need to brake

    // Loop for up to 100 cycles, pulsing power and/or direction changes each iteration
    for(int i=0; i<100; i++) {

      System.out.println("\n"+leader.getPositionString());
      System.out.println(follower.getPositionString());

      coastTime=DEFAULT_COAST_TIME;
      drive.Stop(); // Stop any pulse or turn action
      sleepms(coastTime); // Coast a bit
      
      // Find out and print out where we are this cycle
      System.out.println("\n"+leader.getPositionString());  
      System.out.println(follower.getPositionString());       

      // ************** TURN if we need to
      offHeading = getOffHeading();
      turnTime = DEFAULT_TURN_TIME;
      if(offHeading < -MIN_TURN_THRESHOLD) {
        drive.Right(); System.out.println(""+i+" Turn RIGHT "+offHeading );
      }
      else if(offHeading > MIN_TURN_THRESHOLD) {
        drive.Left(); System.out.println(""+i+" Turn LEFT "+offHeading);       
      }
      // Increase time turning if getting far off course proportional to amount off
      if(Math.abs(offHeading) > LONG_TURN_THRESHOLD) {
        turnTime = (int)((double) turnTime * Math.abs(offHeading) / TURN_DIVISOR);
      }
      
      sleepms(turnTime);  
      System.out.println("\n"+leader.getPositionString());  
      System.out.println(follower.getPositionString());       

      // ************  PUSH ON if we are falling back
      amountBehind = follower.getDistanceToLeader();
      if(amountBehind > MAX_AMOUNT_BEHIND_BEFORE_THRUST)
      {
        drive.Go(); System.out.println(""+i+" GO ON");
        powerTime = DEFAULT_THRUST_TIME;
        breakReadyCount = 0;     
      }
      else {
        drive.Stop();
      }
      // If we are getting considerably too far behind,
      // put more-than-proportionally more time into power
      if(amountBehind > EXTRA_THRUST_NEEDED_DISTANCE) {
        powerTime = (int)((double)(powerTime * Math.pow(amountBehind /
          EXTRA_THRUST_NEEDED_DISTANCE,EXTRA_THRUST_EXPONENT)));
      }
      
      // If we have caught up brake slightly proportional to amount ahead
      braking = false;
      if(amountBehind < MIN_AMOUNT_BEHIND_BEFORE_BRAKE) {
        drive.Brake(true); System.out.println(""+i+" BRAKE");
        powerTime = (int)((MIN_AMOUNT_BEHIND_BEFORE_BRAKE+3
          -amountBehind) * BRAKING_THRESHOLD);
        braking = true;
      }
      
      sleepms(powerTime); // POWER TIME
      if(braking) drive.Brake(false); // turn it off if it was on
      
      // Check to see if other rover has completely stopped
      
      prevLeaderX = leaderX;
      leaderX = leader.getXPosQuick();
      prevLeaderY = leaderY;
      leaderY = leader.getYPosQuick();
      if(prevLeaderX == leaderX && prevLeaderY == leaderY) {
        drive.Brake(true);
        break; // stop the loop -- we are done.      
      }

    }
    
    // At end of above loop, we may need to slow down and stop
    amountBehind = follower.getDistanceToLeader();
    if (amountBehind < END_MIN_DISTANCE_BEFORE_REVERSE) {
      drive.Reverse();
      System.out.println("REVERSING to avoid crash at end");
      sleepms(END_REVERSE_TIME);
    }
    drive.Stop();  // Make sure no more power is being applied.
    
    System.out.println("Leader has stopped, so braking");
    drive.Brake(true);

  }
}
