// Core file for controlling a follower Rover

// Adapted from work by Author: Michal Pasternak originally in Java
// Umplified and modifies by author: Timothy Lethbridge

// One classes are being left un-umplifed (in Java)
external SocketCommunicator {}

// Class that formats and sends commands
use DriveCommands.ump;
use RoverController_code-updateData.ump; // Update location from server
use RoverController_code-general.ump; // Utilities

// Choice of follow algorithm
use RoverController_FMfollow.ump;

// Generic Rover class
// Captures general model behaviour common to the leader and follower
class Rover {
  abstract;

  // Java classes needed for processing input received via TCP/IP from simulation servers
  depend java.util.Scanner;
  depend java.util.regex.*;

  // TCP/IP communication information
  String nameForCommanding;
  SocketCommunicator querySocket;

  // Used to track time of queries so can calculate speed  
  long lastUpdateTime = 0L;
  const long MinimumRefreshTime = 20L;
  
  // The controller of the system
  * -> 1 RoverController controller;

  // X position in simulation co-ordinates.  
  Double xPos = 0.0;
  before getXPos {updatePosition();} // get the data from server - demonstrates aspect capability
  Double xPosQuick = {xPos}; // Used when we know it was just calculated

  // Y position in simulation co-ordinates    
  Double yPos = 0.0;
  before getYPos {updatePosition();} // get the data from server
  Double yPosQuick = {yPos}; // Used when we know it was just calculated

  Double speed = 0.0; // to be calculated from two position readings over time
  Double speedQuick = {speed}; // Used when we know it was just calculated  

}

// One of two subclasses of Rover
// This Rover is controlled by the simulation engine
class LeaderRover {
  depend java.util.Scanner;
  depend java.util.regex.*;

  isA Rover;
  Double distanceToFollower =0.0;
  
}

// Second subclass of Rover
// This one is to be controlled by our algorithms
class FollowerRover {
  depend java.util.Scanner;
  depend java.util.regex.*;

  isA Rover;
  
  * -> 0..1 LeaderRover leader;
  after constructor {
    setLeader(getController().getLeader());
  }  
  
  Double distanceToLeader = {getLeader().getDistanceToFollower()}
  Double compass = 0.0;
  Double bearingToLeader = 0.0;

  Integer leftWheelPower = 0;
  Integer rightWheelPower = 0;
}


// The controller that will contain the algorithm for the follower
class RoverController 
{
  depend java.io.File;
  depend java.util.*;
  depend java.io.FileNotFoundException;

  SocketCommunicator rover = new SocketCommunicator();
  SocketCommunicator ref = new SocketCommunicator();
  DriveCommands drive = null;  // Initialized in constructor
  const String IP = "127.0.0.1";
  
  0..1 controller -- 0..1 LeaderRover leader;
  0..1 controller -- 0..1 FollowerRover follower;
  
  after constructor {
    setLeader(new LeaderRover("Leader", ref, this));
    setFollower(new FollowerRover("Rover", rover, this));
    
    int refPort=0;
    int roverPort=0;
    
    // Read in parameters defining Ports
    try {
      //------ Load config
      java.util.List<String> conf = readFile("Settings/config.txt");
      Iterator<String> conIt = conf.iterator();
      while (conIt.hasNext()) {
        String a = conIt.next();
        if (a.contains("=") == true) {
          String b = a.substring(0, a.indexOf('='));
          if (b.equals("controlPort"))
            roverPort = Integer.parseInt(a.substring(a.indexOf('=')+1));
            if (b.equals("observationPort"))
              refPort = Integer.parseInt(a.substring(a.indexOf('=')+1));
        }
      }
      rover.connectToServer(IP,roverPort);
      ref.connectToServer(IP,refPort);
      drive = new DriveCommands(rover,"Rover");
    }
    catch (Exception e){} 
  }
  

  public static void main(String[] s) {

    RoverController rc= new RoverController();
    rc.follow();
  }
  



}
